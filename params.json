{
  "name": "Microbule",
  "tagline": "Making Microservices Fun and Easy!",
  "body": "# Microbule\r\n\r\n\r\nMicrobule provides a framework for developing [Microservices](http://www.martinfowler.com/articles/microservices.html)\r\nquickly and easily!  Services are written using the standard\r\n [Java API for RESTful Services](https://jax-rs-spec.java.net/) (JAX-RS).\r\n\r\n## Getting Started\r\n\r\nMicrobule is an extension of the [Apache Karaf](http://karaf.apache.org) container.  Getting started with Microbule is\r\n simple:\r\n\r\n1. [Download](http://karaf.apache.org/download.html) Apache Karaf (version 4.0.x) and extract to [KARAF_HOME].\r\n2. Start Apache Karaf:\r\n\r\n ```\r\n cd [KARAF_HOME]\r\n bin/karaf\r\n ```\r\n\r\n3. Install the Microbule Karaf [Feature](https://karaf.apache.org/manual/latest/provisioning):\r\n\r\n ```\r\n         __ __                  ____\r\n        / //_/____ __________ _/ __/\r\n       / ,<  / __ `/ ___/ __ `/ /_\r\n      / /| |/ /_/ / /  / /_/ / __/\r\n     /_/ |_|\\__,_/_/   \\__,_/_/\r\n\r\n   Apache Karaf (4.0.7)\r\n\r\n Hit '<tab>' for a list of available commands\r\n and '[cmd] --help' for help on a specific command.\r\n Hit '<ctrl-d>' or type 'system:shutdown' or 'logout' to shutdown Karaf.\r\n\r\n karaf@root()> repo-add mvn:org.microbule/microbule-features/0.1.0/xml/features\r\n karaf@root()> feature:install microbule\r\n ```\r\n\r\n4. Install The Microbule Examples\r\n\r\n ```\r\n karaf@root()> feature:install microbule-examples\r\n ```\r\n\r\n5. Enjoy!\r\n\r\n## Writing Your Own Services\r\n\r\nMicrobule uses the OSGi [Whiteboard Pattern](http://enroute.osgi.org/doc/218-patterns.html) to discover JAX-RS services\r\nat runtime.  In order to register a service with Microbule, you have to expose them as an OSGi service with the\r\n\"microbule.address\" service property.  Microbule provides the following BundleActivator-based example:\r\n\r\n```\r\npublic class HelloActivator implements BundleActivator {\r\n\r\n    private ServiceRegistration<HelloResource> registration;\r\n\r\n    @Override\r\n    public void start(BundleContext context) throws Exception {\r\n        Dictionary<String,Object> props = new Hashtable<>();\r\n        props.put(\"microbule.address\", \"/microbule-example-activator\");\r\n        registration = context.registerService(HelloResource.class, new DefaultHelloResource(), props);\r\n    }\r\n\r\n    @Override\r\n    public void stop(BundleContext context) throws Exception {\r\n        registration.unregister();\r\n    }\r\n}\r\n\r\n```\r\n\r\nMicrobule will automatically detect the service set its publish address as \"/microbule-example-activator\" using\r\n[Apache CXF](http://cxf.apache.org) as the JAX-RS implementation.  Since Microbule uses OSGi services, you can use your\r\nframework-of-choice (OSGi Blueprint, OSGi Declarative Services, CDI, etc.) to wire up your service implementation object.\r\nThe service *interface* should be annotated with all of the appropriate JAX-RS annotations.\r\n\r\n## Microbule Features\r\n\r\nMicrobule provides many built-in features out-of-the-box.\r\n\r\n### GSON\r\n\r\nMicrobule will transform payloads to/from JSON using the [Google GSON](https://github.com/google/gson) library.  For\r\nexample, given the following response type:\r\n\r\n```\r\npublic class HelloResponse {\r\n\r\n    private final String greeting;\r\n\r\n    public HelloResponse(String greeting) {\r\n        this.greeting = greeting;\r\n    }\r\n\r\n    public String getGreeting() {\r\n        return greeting;\r\n    }\r\n}\r\n```\r\n\r\nMicrobule will automatically format the response paylad as:\r\n\r\n```\r\n{\r\n  \"greeting\": \"Hello, Microbule!\"\r\n}\r\n```\r\n\r\n### Request Logging\r\n\r\nMicrobule will log begin/end events for every service call:\r\n\r\n ```\r\n 2016-11-21 10:57:01,568  INFO RequestLogFilter - BEGIN GET hello/Microbule\r\n 2016-11-21 10:57:01,583  INFO RequestLogFilter - END   GET hello/Microbule - 200 OK (0.012 sec)\r\n ```\r\n\r\n### Bean Validation ([JSR-303](https://jcp.org/en/jsr/detail?id=303))\r\n\r\nMicrobule can automatically validate method parameters using Bean Validation:\r\n\r\n ```\r\n @Path(\"/\")\r\n public interface HelloResource {\r\n\r\n     @Path(\"/hello/{name}\")\r\n     @Produces(MediaType.APPLICATION_JSON)\r\n     @GET\r\n     @Cacheable\r\n     HelloResponse sayHello(@PathParam(\"name\") @Size(min = 5, message=\"Name must be at least 5 characters long.\") String name);\r\n }\r\n ```\r\n\r\n### Cross-Origin Resource Scripting (CORS)\r\n\r\nMicrobule automatically adds CORS headers to your responses.\r\n\r\n### Tracer\r\n\r\nMicrobule will generate a the following random UUID header values automatically:\r\n\r\n- **Microbule-Trace-ID**: a unique value corresponding to a \"transaction.\"  If the header is found on the request, the\r\nexisting value will be used.\r\n- **Microbule-Request-ID**: a unique value corresponding to the request itself.  This is generated for each and every\r\nrequest.\r\n\r\nA typical response will contain the following headers:\r\n\r\n ```\r\n Microbule-Request-ID=[3a5bf571-99fd-4c6b-b79e-7ff0a28e9350]\r\n Microbule-Trace-ID=[da3e59f4-8aff-4a89-bc30-7ad310fecf63]\r\n ```\r\n\r\n### Cache-Control Header\r\n\r\nMicrobule will automatically manage the *Cache-Control* headers for you.  Each method annotated with @Cacheable will\r\nyield a *Cache-Control* header.  For example, consider the following method:\r\n\r\n ```\r\n @GET\r\n @Produces(MediaType.TEXT_PLAIN)\r\n @Path(\"/value\")\r\n @Cacheable(maxAge = 600)\r\n String getValue();\r\n ```\r\n\r\nWhen executed, the *Cache-Control* header will contain:\r\n\r\n ```\r\n Cache-Control=[no-transform,max-age=600]\r\n ```\r\n\r\nMicrobule will also manage the *ETag* and *Last-Modified* headers for you.  You can provide these values by using a\r\nJAX-RS Response object:\r\n\r\n ```\r\n public Response createResponse() {\r\n   return Response.ok(\"payload\").lastModified(new Date()).build();\r\n }\r\n ```\r\n\r\nor by injecting a *ResourceState* object, using the @Context annotation:\r\n\r\n  ```\r\n  public class CacheResourceImpl implements CacheResource {\r\n\r\n      @Context\r\n      private ResourceState resourceState;\r\n\r\n      @Override\r\n      public String getValueWithEtag() {\r\n          resourceState.setEntityTag(\"12345\");\r\n          return \"payload\";\r\n      }\r\n  }\r\n  ```\r\n\r\nWhen an *ETag* or *Last-Modified* value is provided, Microbule will check the *If-None-Match* and *If-Modified-Since*\r\nheaders correspondingly.  If the resource is up-to-date, Microbule will return a \"No Content\" (204) response.\r\n\r\n### Client Timeout\r\n\r\nMicrobule will automatically set connection and receive timeouts (10 sec and 30 sec by default) on all generated client\r\nproxies.  You can customize the timeout values using configuration properties when you create the proxy.  For example,\r\nyou can set the \"microbule.timeout.receiveTimeout\" property to a value (in milliseconds) to be used by all calls for\r\nthe proxy.  Alternatively, you can customize per-method (we use the method name as the key) timeouts by setting the\r\n\"microbule.timeout.foo.connectionTimeout\" value, which would override the connection timeout value for the \"foo\" method\r\nonly.\r\n\r\n### Circuit Breaker\r\n\r\nAll client proxies generated by Microbule will include a\r\n[Circuit Breaker](http://martinfowler.com/bliki/CircuitBreaker.html) to avoid overloading services when they are\r\nencountering issues.  By default, the circuit breaker will \"open\" when the service responds with more than *10* server\r\nerror level (500+) responses per second and will \"close\" when it drops back down below this threshold.\r\n\r\n### Error Mapping\r\n\r\nMicrobule will inject its own JAX-RS ExceptionMappers into the services by default.  These ExceptionMappers will use\r\nthe ErrorMapperService to create responses when an exception happens.  The default format of the error response will be\r\na plain text response with newline-separated error messages.  You can override the default format by exposing an\r\nErrorResponseStrategy OSGi service.  To provide mapping for individual exception types, simply expose an ErrorMapper\r\nOSGi service.\r\n\r\n## Creating Client Proxies\r\n\r\nOne of the beautiful features of Apache CXF is its ability to generate dynamic client proxies that implement the JAX-RS\r\nservice interface.  Microbule uses this feature to provide type-safe client proxies:\r\n\r\n ```\r\n JaxrsProxyFactory proxyFactory = ...;\r\n Map<String,Object> props = new HashMap<>();\r\n props.put(\"microbule.circuitbreaker.enabled\", \"false\");\r\n HelloService helloService = proxyFactory.createProxy(HelloService.class, \"http://localhost:8383/HelloService\", props);\r\n ```\r\n\r\nMicrobule exposes a JaxrsProxyFactory OSGi service for you to use.  Simply inject it wherever you need to create client\r\nproxies.\r\n\r\n## Extending Microbule\r\n\r\nExtending Microbule couldn't be simpler.  JAX-RS relies upon the notion of \"providers\" in order to customize the\r\n\"containers\" and \"clients.\"  Microbule provides two extension points JaxrsServerDecorator and JaxrsProxyDecorator which\r\nallow you to add container and client providers, respectively:\r\n\r\n ```\r\n public class MyServerDecorator implements JaxrsServerDecorator {\r\n     @Override\r\n     public void decorate(JaxrsServerConfig server) {\r\n         MyServerProvider provider = new MyServerProvider();\r\n         server.addProvider(provider);\r\n     }\r\n   }\r\n }\r\n ```\r\n\r\nThe JaxrsServerConfig object will provide access to the service interface, the base address, and the service properties\r\nassociated with the OSGi service used for the server.  To register your provider, you must expose it as an OSGi service\r\nwith the \"name\" service property indicating its name.  Similarly, for customizing client proxies, you simply implement\r\nJaxrsProxyDecorator:\r\n\r\n ```\r\n public class MyProxyDecorator implements JaxrsProxyDecorator {\r\n     @Override\r\n     public void decorate(JaxrsProxyConfig proxy) {\r\n         MyProxyProvider provider = new MyProxyProvider();\r\n         proxy.addProvider(provider);\r\n     }\r\n }\r\n ```\r\n\r\nAgain, the JaxrsProxyDecorator must be expopsed as an OSGi service with the \"name\" property.\r\n\r\n## Opting Out\r\n\r\nBy default, Microbule will apply all registered decorators to your services/proxies.  However, you can opt out of them\r\nindividually using a service property.  For example, if you want to provide your own JSON processing provider, you can\r\ndisable the GSON-based provider by setting the following service property:\r\n\r\n ```\r\n microbule.gson.enabled=false\r\n ```\r\n\r\n## What's in a Name?\r\n\r\nA \"microbule\" is a unit of length used in Marvel's\r\n[Guardians of the Galaxy](http://marvel.com/characters/70/guardians_of_the_galaxy) movie.  Microbule strives to be the\r\nmicroservices framework that the others will try to measure up to!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}